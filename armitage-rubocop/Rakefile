# frozen_string_literal: true

require 'bundler/gem_tasks'
require 'rubocop/rake_task'
require 'open3'
require 'yaml'
require 'rubocop'
require 'rubocop-rails'
require 'rubocop-performance'
require 'rubocop-rspec'

RuboCop::RakeTask.new(:rubocop) do |t|
  t.options = %w[--config ./lib/rubocop.rails.yml]
  t.requires << 'rubocop-rspec'
  t.requires << 'rubocop-performance'
  t.requires << 'rubocop-rails'
end

NON_CHECKABLE_COPS = %w[Rails].freeze # NOTE: Global Rails cop has only `Enabled` option

namespace :armitage_rubocop do
  task :build do
    build_processes = {
      code_style_check:
        Open3.popen3('bundle exec rake rubocop'),
      cops_validation:
        Open3.popen3('bundle exec rake armitage_rubocop:validation:recognizable_cops'),
      yaml_validation:
        Open3.popen3('bundle exec rake armitage_rubocop:validation:valid_yamls')
    }

    # NOTE: results structure { type => exit_code }
    results = {}.tap do |result_data|
      build_processes.each_pair do |build_type, build_process|
        # NOTE: build_process => [stdin, stdout, stderr, wtr]
        build_result = build_process[3].value.exitstatus
        result_data[build_type] = build_result
      end
    end

    result_message = results.each_pair.map do |(result_type, result_status)|
      type = "- \e[1;33m#{result_type}\e[0m\t=> "
      desc = result_status.zero? ? "\e[32msuccess\e[0m" : "\e[31mfail\e[0m"

      "#{type} #{desc}"
    end.join("\n")

    if results.values.all?(&:zero?)
      puts "[\e[32mARMITAGE_RUBOCOP BUILD\e[0m] => \e[1;33mSuccessful!\e[0m\n#{result_message}"
    else
      abort "[\e[31mARMITAGE_RUBOCOP BUILD\e[0m] => FAILED!\n#{result_message}"
    end
  end

  namespace :validation do
    desc 'Checks that all *.yml files has the valid structure'
    task :valid_yamls do
      yamls = Dir[Pathname.new(__FILE__).join('../lib/**/*.yml')]

      # NOTE: try to load without Psych exceptions
      invalid_yamls = yamls.each_with_object([]) do |file_name, invalid_files|
        # rubocop:disable Style/RedundantBegin
        begin
          YAML.safe_load(File.read(file_name))
        rescue StandardError
          (invalid_files << "- \e[33m#{file_name}\e[0m")
        end
        # rubocop:enable Style/RedundantBegin
      end

      if invalid_yamls.empty?
        puts "[\e[32mYAML FILE VALIDATION\e[0m] => \e[1;33mall files has valid strucutre!\e[0m"
      else
        invalid_yamls_message = invalid_yamls.join("\n")
        abort "[\e[31mYAML FILE VALIDATION\e[0m] => some files has invalid structure:\n" \
              "#{invalid_yamls_message}"
      end
    end

    desc 'Checks that all defined cops can be used'
    task :recognizable_cops do
      yamls = Dir[Pathname.new(__FILE__).join('../lib/**/*.yml')]
      invalid_cops = Hash.new { |h, k| h[k] = +'' }

      # NOTE: strongly rubocop-related realization
      #  - see https://github.com/rubocop-hq/rubocop/blob/master/lib/rubocop/config.rb
      #  - see https://github.com/rubocop-hq/rubocop/blob/master/lib/rubocop/config_loader.rb
      #  - RuboCop::Config#validate
      #  - RuboCop::Config#warn_about_unrecognized_cops
      #  - RuboCop::ConfigLoader.load_file
      #  - RuboCop::ConfigLoader.default_configuration
      yamls.each do |yaml_file|
        rubocop_config = RuboCop::ConfigLoader.load_file(yaml_file)

        # NOTE: validate cop existence
        rubocop_config.keys.each do |cop|
          next if RuboCop::ConfigLoader.default_configuration.key?(cop)
          next if RuboCop::Cop::Cop.registry.contains_cop_matching?([cop])
          next if cop == 'inherit_mode'

          invalid_cops[cop] = "\e[31mBAD COP\e[0m"
        end

        # NOTE: validate cop params
        rubocop_config.keys.each do |cop|
          next if invalid_cops.key?(cop)

          invalid_params = Set.new

          rubocop_config[cop].each_key do |cop_param|
            next if RuboCop::Config::COMMON_PARAMS.include?(cop_param)
            next if NON_CHECKABLE_COPS.include?(cop)
            next if RuboCop::ConfigLoader.default_configuration[cop].key?(cop_param)

            invalid_params << "\e[35m#{cop_param}\e[0m"
          end

          next if invalid_params.empty?

          invalid_cops[cop] = "\e[31mBAD PARAMS\e[0m: #{invalid_params.to_a.join(', ')}"
        end
      end

      if invalid_cops.empty?
        puts "[\e[32mCOP RECOGNITION CHECK\e[0m] => \e[1;33mall cops are recognizable!\e[0m"
      else
        invalid_cops_message = invalid_cops.each_pair.map do |cop, message|
          "[\e[32m#{cop}\e[0m]\t- #{message}"
        end.join("\n")

        abort "[\e[31mCOP RECOGNITION CHECK\e[0m] => some cops can not be fully recognized:\n" \
              "#{invalid_cops_message}"
      end
    end
  end
end

task default: :rubocop
